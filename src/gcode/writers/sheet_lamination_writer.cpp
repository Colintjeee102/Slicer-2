#include <QStringBuilder>

#include "gcode/writers/sheet_lamination_writer.h"
#include "utilities/enums.h"
#include "utilities/mathutils.h"

#include "geometry/segments/arc.h"


namespace ORNL
{
    SheetLaminationWriter::SheetLaminationWriter(GcodeMeta meta, const QSharedPointer<SettingsBase> &sb) : WriterBase(meta, sb)
    {

    }

    QString SheetLaminationWriter::writeSlicerHeader(const QString &syntax)
    {
        return QString("999\nDXF generated by ORNL Slicer 2 version 1 | Copywrite Â© " % QString::number(QDate::currentDate().year()) % " ORNL\n");
    }

    QString SheetLaminationWriter::writeSettingsHeader(GcodeSyntax syntax)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeInitialSetup(Distance minimum_x, Distance minimum_y, Distance maximum_x, Distance maximum_y, int num_layers)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeBeforeLayer(float min_z, QSharedPointer<SettingsBase> sb)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeBeforePart(QVector3D normal)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeBeforeIsland()
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeBeforeRegion(RegionType type, int pathSize)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeBeforePath(RegionType type)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeTravel(Point start_location, Point target_location, TravelLiftType lType, QSharedPointer<SettingsBase> params)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeLine(const Point &start_point, const Point &target_point, const QSharedPointer<SettingsBase> params)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeAfterPath(RegionType type)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeAfterRegion(RegionType type)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeAfterIsland()
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeAfterPart()
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeAfterLayer()
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeShutdown()
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeSettingsFooter()
    {
        return QString("0\nEOF");
    }

    QString SheetLaminationWriter::writeDwell(Time time)
    {
        return QString("");
    }

    QString SheetLaminationWriter::writeIsland(PolygonList island, float island_z_value)
    {
        QString rv("");
        for (int j = 0; j < island.length(); j++)
        { // all polygons in island
            rv += "0\nSECTION\n2\nENTITIES\n";
            for (int k = 0; k < island[j].length() - 1; k++)
            { // all points in polygon. NOTE THE - 1 BECAUSE WE GO LINE BY LINE AND DON'T WANT TO GO OUTSIDE OF THE ARRAY
                rv += "0\nLINE\n8\nPOLYGON\n10\n";
                rv += QString::number(island[j][k].x()/25400) % "\n20\n";
                rv += QString::number(island[j][k].y()/25400) % "\n30\n";
                rv += QString::number(island_z_value/25400) % "\n11\n";
                rv += QString::number(island[j][k+1].x()/25400) % "\n21\n";
                rv += QString::number(island[j][k+1].y()/25400) % "\n31\n";
                rv += QString::number(island_z_value/25400) % "\n";
            }
            // connect the last point to the first point in a line
            rv += "0\nLINE\n8\nPOLYGON\n10\n";
            rv += QString::number(island[j][island[j].length() - 1].x()/25400) % "\n20\n";
            rv += QString::number(island[j][island[j].length() - 1].y()/25400) % "\n30\n";
            rv += QString::number(island_z_value/25400) % "\n11\n";
            rv += QString::number(island[j][0].x()/25400) % "\n21\n";
            rv += QString::number(island[j][0].y()/25400) % "\n31\n";
            rv += QString::number(island_z_value/25400) % "\n";
            rv += "0\nENDSEC\n";
        }
        return rv;
    }

    QString SheetLaminationWriter::writeLayerOffsets(QVector<Point> origins, QVector<Point> destinations, float origin_z_value, QVector<float> destination_z_values)
    {
        QString rv("");
        rv += "0\nSECTION\n2\nENTITIES\n";
        for (int i = 0; i < origins.length(); i++)
        {
            rv += "0\nLINE\n8\n1\n10\n";
            rv += QString::number(origins[i].x()/25400) % "\n20\n";
            rv += QString::number(origins[i].y()/25400) % "\n30\n";
            rv += QString::number(origin_z_value/25400) % "\n11\n";
            rv += QString::number(destinations[i].x()/25400) % "\n21\n";
            rv += QString::number(destinations[i].y()/25400) % "\n31\n";
            rv += QString::number(destination_z_values[i]/25400) % "\n";
        }
        rv += "999\nend of layer\n";
        return rv;
    }

}
